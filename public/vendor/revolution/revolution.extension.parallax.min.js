/** ******************************************
 * REVOLUTION 5.1.4 EXTENSION - PARALLAX
 * @version: 1.1.1 (25.11.2015)
 * @requires jquery.themepunch.revolution.js
 * @author ThemePunch
******************************************** */
!(function (e) {
  const r = jQuery.fn.revolution; const a = r.is_mobile(); jQuery.extend(!0, r, {
    checkForParallax(e, t) {
      const o = t.parallax; return a && o.disable_onmobile == 'on' ? !1 : ((o.type == '3D' || o.type == '3d') && (punchgs.TweenLite.set(t.c, { overflow: o.ddd_overflow }), punchgs.TweenLite.set(t.ul, { overflow: o.ddd_overflow }), t.sliderType != 'carousel' && o.ddd_shadow == 'on' && (t.c.prepend('<div class="dddwrappershadow"></div>'), punchgs.TweenLite.set(t.c.find('.dddwrappershadow'), {
        force3D: 'auto', transformPerspective: 1600, transformOrigin: '50% 50%', width: '100%', height: '100%', position: 'absolute', top: 0, left: 0, zIndex: 0,
      }))), t.li.each(function () { const e = jQuery(this); if (o.type == '3D' || o.type == '3d') { e.find('.slotholder').wrapAll('<div class="dddwrapper" style="width:100%;height:100%;position:absolute;top:0px;left:0px;overflow:hidden"></div>'), e.find('.tp-parallax-wrap').wrapAll(`<div class="dddwrapper-layer" style="width:100%;height:100%;position:absolute;top:0px;left:0px;z-index:5;overflow:${o.ddd_layer_overflow};"></div>`), e.find('.rs-parallaxlevel-tobggroup').closest('.tp-parallax-wrap').wrapAll('<div class="dddwrapper-layertobggroup" style="position:absolute;top:0px;left:0px;z-index:50;width:100%;height:100%"></div>'); const r = e.find('.dddwrapper'); const a = e.find('.dddwrapper-layer'); const l = e.find('.dddwrapper-layertobggroup'); l.appendTo(r), t.sliderType == 'carousel' && (o.ddd_shadow == 'on' && r.addClass('dddwrappershadow'), punchgs.TweenLite.set(r, { borderRadius: t.carousel.border_radius })), punchgs.TweenLite.set(e, { overflow: 'visible', transformStyle: 'preserve-3d', perspective: 1600 }), punchgs.TweenLite.set(r, { force3D: 'auto', transformOrigin: '50% 50%' }), punchgs.TweenLite.set(a, { force3D: 'auto', transformOrigin: '50% 50%', zIndex: 5 }), punchgs.TweenLite.set(t.ul, { transformStyle: 'preserve-3d', transformPerspective: 1600 }); } for (var s = 1; s <= o.levels.length; s++)e.find(`.rs-parallaxlevel-${s}`).each(function () { const e = jQuery(this); const r = e.closest('.tp-parallax-wrap'); r.data('parallaxlevel', o.levels[s - 1]), r.addClass('tp-parallax-container'); }); }), (o.type == 'mouse' || o.type == 'scroll+mouse' || o.type == 'mouse+scroll' || o.type == '3D' || o.type == '3d') && (e.mouseenter((r) => { const a = e.find('.active-revslide'); const t = e.offset().top; const o = e.offset().left; const l = r.pageX - o; const s = r.pageY - t; a.data('enterx', l), a.data('entery', s); }), e.on('mousemove.hoverdir, mouseleave.hoverdir, trigger3dpath', (r, a) => {
        const l = a && a.li ? a.li : e.find('.active-revslide'); if (o.origo == 'enterpoint') { var s = e.offset().top; var i = e.offset().left; void 0 == l.data('enterx') && l.data('enterx', r.pageX - i), void 0 == l.data('entery') && l.data('entery', r.pageY - s); const d = l.data('enterx') || r.pageX - i; const n = l.data('entery') || r.pageY - s; var p = d - (r.pageX - i); var c = n - (r.pageY - s); var u = o.speed / 1e3 || 0.4; } else var s = e.offset().top; var i = e.offset().left; var p = t.conw / 2 - (r.pageX - i); var c = t.conh / 2 - (r.pageY - s); var u = o.speed / 1e3 || 3; if (r.type == 'mouseleave' && (p = o.ddd_lasth || 0, c = o.ddd_lastv || 0, u = 1.5), l.find('.tp-parallax-container').each(function () {
          const e = jQuery(this); const r = parseInt(e.data('parallaxlevel'), 0); const a = o.type == '3D' || o.type == '3d' ? r / 200 : r / 100; const t = p * a; const l = c * a; o.type == 'scroll+mouse' || o.type == 'mouse+scroll' ? punchgs.TweenLite.to(e, u, {
            force3D: 'auto', x: t, ease: punchgs.Power3.easeOut, overwrite: 'all',
          }) : punchgs.TweenLite.to(e, u, {
            force3D: 'auto', x: t, y: l, ease: punchgs.Power3.easeOut, overwrite: 'all',
          });
        }), o.type == '3D' || o.type == '3d') {
          let h = '.tp-revslider-slidesli .dddwrapper, .dddwrappershadow, .tp-revslider-slidesli .dddwrapper-layer'; t.sliderType === 'carousel' && (h = '.tp-revslider-slidesli .dddwrapper, .tp-revslider-slidesli .dddwrapper-layer'), t.c.find(h).each(function () {
            const e = jQuery(this); const a = o.levels[o.levels.length - 1] / 200; let l = p * a; let s = c * a; const i = t.conw == 0 ? 0 : Math.round(p / t.conw * a * 100) || 0; const d = t.conh == 0 ? 0 : Math.round(c / t.conh * a * 100) || 0; const n = e.closest('li'); let h = 0; let w = !1; e.hasClass('dddwrapper-layer') && (h = o.ddd_z_correction || 65, w = !0), e.hasClass('dddwrapper-layer') && (l = 0, s = 0), n.hasClass('active-revslide') || t.sliderType != 'carousel' ? o.ddd_bgfreeze != 'on' || w ? punchgs.TweenLite.to(e, u, {
              rotationX: d, rotationY: -i, x: l, z: h, y: s, ease: punchgs.Power3.easeOut, overwrite: 'all',
            }) : punchgs.TweenLite.to(e, 0.5, {
              force3D: 'auto', rotationY: 0, rotationX: 0, z: 0, ease: punchgs.Power3.easeOut, overwrite: 'all',
            }) : punchgs.TweenLite.to(e, 0.5, {
              force3D: 'auto', rotationY: 0, z: 0, x: 0, y: 0, rotationX: 0, z: 0, ease: punchgs.Power3.easeOut, overwrite: 'all',
            }), r.type == 'mouseleave' && punchgs.TweenLite.to(jQuery(this), 3.8, { z: 0, ease: punchgs.Power3.easeOut });
          });
        }
      }), a && (window.ondeviceorientation = function (r) {
        let a = Math.round(r.beta || 0) - 70; let l = Math.round(r.gamma || 0); const s = e.find('.active-revslide'); if (jQuery(window).width() > jQuery(window).height()) { const i = l; l = a, a = i; } const d = e.width(); const n = e.height(); const p = 360 / d * l; const c = 180 / n * a; const u = o.speed / 1e3 || 3; if (s.find('.tp-parallax-container').each(function () {
          const e = jQuery(this); const r = parseInt(e.data('parallaxlevel'), 0); const a = r / 100; const t = p * a * 2; const o = c * a * 4; punchgs.TweenLite.to(e, u, {
            force3D: 'auto', x: t, y: o, ease: punchgs.Power3.easeOut, overwrite: 'all',
          });
        }), o.type == '3D' || o.type == '3d') {
          let h = '.tp-revslider-slidesli .dddwrapper, .dddwrappershadow, .tp-revslider-slidesli .dddwrapper-layer'; t.sliderType === 'carousel' && (h = '.tp-revslider-slidesli .dddwrapper, .tp-revslider-slidesli .dddwrapper-layer'), t.c.find(h).each(function () {
            const e = jQuery(this); const a = o.levels[o.levels.length - 1] / 200; offsh = p * a, offsv = c * a * 3, offrv = t.conw == 0 ? 0 : Math.round(p / t.conw * a * 500) || 0, offrh = t.conh == 0 ? 0 : Math.round(c / t.conh * a * 700) || 0, li = e.closest('li'), zz = 0, itslayer = !1, e.hasClass('dddwrapper-layer') && (zz = o.ddd_z_correction || 65, itslayer = !0), e.hasClass('dddwrapper-layer') && (offsh = 0, offsv = 0), li.hasClass('active-revslide') || t.sliderType != 'carousel' ? o.ddd_bgfreeze != 'on' || itslayer ? punchgs.TweenLite.to(e, u, {
              rotationX: offrh, rotationY: -offrv, x: offsh, z: zz, y: offsv, ease: punchgs.Power3.easeOut, overwrite: 'all',
            }) : punchgs.TweenLite.to(e, 0.5, {
              force3D: 'auto', rotationY: 0, rotationX: 0, z: 0, ease: punchgs.Power3.easeOut, overwrite: 'all',
            }) : punchgs.TweenLite.to(e, 0.5, {
              force3D: 'auto', rotationY: 0, z: 0, x: 0, y: 0, rotationX: 0, z: 0, ease: punchgs.Power3.easeOut, overwrite: 'all',
            }), r.type == 'mouseleave' && punchgs.TweenLite.to(jQuery(this), 3.8, { z: 0, ease: punchgs.Power3.easeOut });
          });
        }
      })), void r.scrollTicker(t, e));
    },
    scrollTicker(e, a) { e.scrollTicker != 1 && (e.scrollTicker = !0, punchgs.TweenLite.ticker.fps(150), punchgs.TweenLite.ticker.addEventListener('tick', () => { r.scrollHandling(e); }, a, !1, 1)); },
    scrollHandling(e) {
      function t(e, r) { e.lastscrolltop = r; }e.lastwindowheight = e.lastwindowheight || jQuery(window).height(); const o = e.c.offset().top; const l = jQuery(window).scrollTop(); const s = new Object(); const i = e.viewPort; const d = e.parallax; if (e.lastscrolltop == l && !e.duringslidechange) return !1; punchgs.TweenLite.delayedCall(0.2, t, [e, l]), s.top = o - l, s.h = e.conh == 0 ? e.c.height() : e.conh, s.bottom = o - l + s.h; const n = s.top < 0 ? s.top / s.h : s.bottom > e.lastwindowheight ? (s.bottom - e.lastwindowheight) / s.h : 0; e.scrollproc = n, r.callBackHandling && r.callBackHandling(e, 'parallax', 'start'); let p = 1 - Math.abs(n); if (p = p < 0 ? 0 : p, i.enable && (1 - i.visible_area <= p ? e.inviewport || (e.inviewport = !0, r.enterInViewPort(e)) : e.inviewport && (e.inviewport = !1, r.leaveViewPort(e))), a && e.parallax.disable_onmobile == 'on') return !1; const c = new punchgs.TimelineLite(); c.pause(), d.type != '3d' && d.type != '3D' && ((d.type == 'scroll' || d.type == 'scroll+mouse' || d.type == 'mouse+scroll') && e.c.find('.tp-parallax-container').each(function (r) { const a = jQuery(this); const t = parseInt(a.data('parallaxlevel'), 0) / 100; const o = n * -(t * e.conh); a.data('parallaxoffset', o), c.add(punchgs.TweenLite.set(a, { force3D: 'auto', y: o }), 0); }), e.c.find('.tp-revslider-slidesli .slotholder, .tp-revslider-slidesli .rs-background-video-layer').each(function () {
        const r = jQuery(this); let a = r.data('bgparallax') || e.parallax.bgparallax; if (a = a == 'on' ? 1 : a, void 0 !== a || a !== 'off') {
          const t = e.parallax.levels[parseInt(a, 0) - 1] / 100; const o = n * -(t * e.conh); jQuery.isNumeric(o) && c.add(punchgs.TweenLite.set(r, {
            position: 'absolute', top: '0px', left: '0px', backfaceVisibility: 'hidden', force3D: 'true', y: `${o}px`, overwrite: 'auto',
          }), 0);
        }
      })), r.callBackHandling && r.callBackHandling(e, 'parallax', 'end'), c.play(0);
    },
  });
}(jQuery));
