/** !
 * MixItUp v2.1.11
 *
 * @copyright Copyright 2015 KunkaLabs Limited.
 * @author    KunkaLabs Limited.
 * @link      https://mixitup.kunkalabs.com
 *
 * @license   Commercial use requires a commercial license.
 *            https://mixitup.kunkalabs.com/licenses/
 *
 *            Non-commercial use permitted under terms of CC-BY-NC license.
 *            http://creativecommons.org/licenses/by-nc/3.0/
 */
!(function (a, b) {
  a.MixItUp = function () {
    const b = this; b._execAction('_constructor', 0), a.extend(b, {
      selectors: { target: '.mix', filter: '.filter', sort: '.sort' },
      animation: {
        enable: !0, effects: 'fade scale', duration: 600, easing: 'ease', perspectiveDistance: '3000', perspectiveOrigin: '50% 50%', queue: !0, queueLimit: 1, animateChangeLayout: !1, animateResizeContainer: !0, animateResizeTargets: !1, staggerSequence: !1, reverseOut: !1,
      },
      callbacks: {
        onMixLoad: !1, onMixStart: !1, onMixBusy: !1, onMixEnd: !1, onMixFail: !1, _user: !1,
      },
      controls: {
        enable: !0, live: !1, toggleFilterButtons: !1, toggleLogic: 'or', activeClass: 'active',
      },
      layout: { display: 'inline-block', containerClass: '', containerClassFail: 'fail' },
      load: { filter: 'all', sort: !1 },
      _$body: null,
      _$container: null,
      _$targets: null,
      _$parent: null,
      _$sortButtons: null,
      _$filterButtons: null,
      _suckMode: !1,
      _mixing: !1,
      _sorting: !1,
      _clicking: !1,
      _loading: !0,
      _changingLayout: !1,
      _changingClass: !1,
      _changingDisplay: !1,
      _origOrder: [],
      _startOrder: [],
      _newOrder: [],
      _activeFilter: null,
      _toggleArray: [],
      _toggleString: '',
      _activeSort: 'default:asc',
      _newSort: null,
      _startHeight: null,
      _newHeight: null,
      _incPadding: !0,
      _newDisplay: null,
      _newClass: null,
      _targetsBound: 0,
      _targetsDone: 0,
      _queue: [],
      _$show: a(),
      _$hide: a(),
    }), b._execAction('_constructor', 1);
  }, a.MixItUp.prototype = {
    constructor: a.MixItUp,
    _instances: {},
    _handled: { _filter: {}, _sort: {} },
    _bound: { _filter: {}, _sort: {} },
    _actions: {},
    _filters: {},
    extend(b) { for (const c in b)a.MixItUp.prototype[c] = b[c]; },
    addAction(b, c, d, e) { a.MixItUp.prototype._addHook('_actions', b, c, d, e); },
    addFilter(b, c, d, e) { a.MixItUp.prototype._addHook('_filters', b, c, d, e); },
    _addHook(b, c, d, e, f) { const g = a.MixItUp.prototype[b]; const h = {}; f = f === 1 || f === 'post' ? 'post' : 'pre', h[c] = {}, h[c][f] = {}, h[c][f][d] = e, a.extend(!0, g, h); },
    _init(b, c) { const d = this; if (d._execAction('_init', 0, arguments), c && a.extend(!0, d, c), d._$body = a('body'), d._domNode = b, d._$container = a(b), d._$container.addClass(d.layout.containerClass), d._id = b.id, d._platformDetect(), d._brake = d._getPrefixedCSS('transition', 'none'), d._refresh(!0), d._$parent = d._$targets.parent().length ? d._$targets.parent() : d._$container, d.load.sort && (d._newSort = d._parseSort(d.load.sort), d._newSortString = d.load.sort, d._activeSort = d.load.sort, d._sort(), d._printSort()), d._activeFilter = d.load.filter === 'all' ? d.selectors.target : d.load.filter === 'none' ? '' : d.load.filter, d.controls.enable && d._bindHandlers(), d.controls.toggleFilterButtons) { d._buildToggleArray(); for (let e = 0; e < d._toggleArray.length; e++)d._updateControls({ filter: d._toggleArray[e], sort: d._activeSort }, !0); } else d.controls.enable && d._updateControls({ filter: d._activeFilter, sort: d._activeSort }); d._filter(), d._init = !0, d._$container.data('mixItUp', d), d._execAction('_init', 1, arguments), d._buildState(), d._$targets.css(d._brake), d._goMix(d.animation.enable); },
    _platformDetect() { const a = this; const c = ['Webkit', 'Moz', 'O', 'ms']; const d = ['webkit', 'moz']; const e = window.navigator.appVersion.match(/Chrome\/(\d+)\./) || !1; const f = typeof InstallTrigger !== 'undefined'; const g = function (a) { for (let b = 0; b < c.length; b++) if (`${c[b]}Transition` in a.style) return { prefix: `-${c[b].toLowerCase()}-`, vendor: c[b] }; return 'transition' in a.style ? '' : !1; }; const h = g(a._domNode); a._execAction('_platformDetect', 0), a._chrome = e ? parseInt(e[1], 10) : !1, a._ff = f ? parseInt(window.navigator.userAgent.match(/rv:([^)]+)\)/)[1]) : !1, a._prefix = h.prefix, a._vendor = h.vendor, a._suckMode = window.atob && a._prefix ? !1 : !0, a._suckMode && (a.animation.enable = !1), a._ff && a._ff <= 4 && (a.animation.enable = !1); for (let i = 0; i < d.length && !window.requestAnimationFrame; i++)window.requestAnimationFrame = window[`${d[i]}RequestAnimationFrame`]; typeof Object.getPrototypeOf !== 'function' && (typeof 'test'.__proto__ === 'object' ? Object.getPrototypeOf = function (a) { return a.__proto__; } : Object.getPrototypeOf = function (a) { return a.constructor.prototype; }), a._domNode.nextElementSibling === b && Object.defineProperty(Element.prototype, 'nextElementSibling', { get() { for (let a = this.nextSibling; a;) { if (a.nodeType === 1) return a; a = a.nextSibling; } return null; } }), a._execAction('_platformDetect', 1); },
    _refresh(a, c) { const d = this; d._execAction('_refresh', 0, arguments), d._$targets = d._$container.find(d.selectors.target); for (var e = 0; e < d._$targets.length; e++) { var f = d._$targets[e]; if (f.dataset === b || c) { f.dataset = {}; for (let g = 0; g < f.attributes.length; g++) { const h = f.attributes[g]; const i = h.name; const j = h.value; if (i.indexOf('data-') > -1) { const k = d._helpers._camelCase(i.substring(5, i.length)); f.dataset[k] = j; } } }f.mixParent === b && (f.mixParent = d._id); } if (d._$targets.length && a || !d._origOrder.length && d._$targets.length) { d._origOrder = []; for (var e = 0; e < d._$targets.length; e++) { var f = d._$targets[e]; d._origOrder.push(f); } }d._execAction('_refresh', 1, arguments); },
    _bindHandlers() { const c = this; const d = a.MixItUp.prototype._bound._filter; const e = a.MixItUp.prototype._bound._sort; c._execAction('_bindHandlers', 0), c.controls.live ? c._$body.on(`click.mixItUp.${c._id}`, c.selectors.sort, function () { c._processClick(a(this), 'sort'); }).on(`click.mixItUp.${c._id}`, c.selectors.filter, function () { c._processClick(a(this), 'filter'); }) : (c._$sortButtons = a(c.selectors.sort), c._$filterButtons = a(c.selectors.filter), c._$sortButtons.on(`click.mixItUp.${c._id}`, function () { c._processClick(a(this), 'sort'); }), c._$filterButtons.on(`click.mixItUp.${c._id}`, function () { c._processClick(a(this), 'filter'); })), d[c.selectors.filter] = d[c.selectors.filter] === b ? 1 : d[c.selectors.filter] + 1, e[c.selectors.sort] = e[c.selectors.sort] === b ? 1 : e[c.selectors.sort] + 1, c._execAction('_bindHandlers', 1); },
    _processClick(c, d) { const e = this; const f = function (c, d, f) { const g = a.MixItUp.prototype; g._handled[`_${d}`][e.selectors[d]] = g._handled[`_${d}`][e.selectors[d]] === b ? 1 : g._handled[`_${d}`][e.selectors[d]] + 1, g._handled[`_${d}`][e.selectors[d]] === g._bound[`_${d}`][e.selectors[d]] && (c[`${f ? 'remove' : 'add'}Class`](e.controls.activeClass), delete g._handled[`_${d}`][e.selectors[d]]); }; if (e._execAction('_processClick', 0, arguments), !e._mixing || e.animation.queue && e._queue.length < e.animation.queueLimit) { if (e._clicking = !0, d === 'sort') { const g = c.attr('data-sort'); (!c.hasClass(e.controls.activeClass) || g.indexOf('random') > -1) && (a(e.selectors.sort).removeClass(e.controls.activeClass), f(c, d), e.sort(g)); } if (d === 'filter') { let h; const i = c.attr('data-filter'); const j = e.controls.toggleLogic === 'or' ? ',' : ''; e.controls.toggleFilterButtons ? (e._buildToggleArray(), c.hasClass(e.controls.activeClass) ? (f(c, d, !0), h = e._toggleArray.indexOf(i), e._toggleArray.splice(h, 1)) : (f(c, d), e._toggleArray.push(i)), e._toggleArray = a.grep(e._toggleArray, (a) => a), e._toggleString = e._toggleArray.join(j), e.filter(e._toggleString)) : c.hasClass(e.controls.activeClass) || (a(e.selectors.filter).removeClass(e.controls.activeClass), f(c, d), e.filter(i)); }e._execAction('_processClick', 1, arguments); } else typeof e.callbacks.onMixBusy === 'function' && e.callbacks.onMixBusy.call(e._domNode, e._state, e), e._execAction('_processClickBusy', 1, arguments); },
    _buildToggleArray() { const a = this; const b = a._activeFilter.replace(/\s/g, ''); if (a._execAction('_buildToggleArray', 0, arguments), a.controls.toggleLogic === 'or')a._toggleArray = b.split(','); else { a._toggleArray = b.split('.'), !a._toggleArray[0] && a._toggleArray.shift(); for (var c, d = 0; c = a._toggleArray[d]; d++)a._toggleArray[d] = `.${c}`; }a._execAction('_buildToggleArray', 1, arguments); },
    _updateControls(c, d) { const e = this; const f = { filter: c.filter, sort: c.sort }; const g = function (a, b) { try { d && h === 'filter' && f.filter !== 'none' && f.filter !== '' ? a.filter(b).addClass(e.controls.activeClass) : a.removeClass(e.controls.activeClass).filter(b).addClass(e.controls.activeClass); } catch (c) {} }; var h = 'filter'; let i = null; e._execAction('_updateControls', 0, arguments), c.filter === b && (f.filter = e._activeFilter), c.sort === b && (f.sort = e._activeSort), f.filter === e.selectors.target && (f.filter = 'all'); for (let j = 0; j < 2; j++)i = e.controls.live ? a(e.selectors[h]) : e[`_$${h}Buttons`], i && g(i, `[data-${h}="${f[h]}"]`), h = 'sort'; e._execAction('_updateControls', 1, arguments); },
    _filter() { const b = this; b._execAction('_filter', 0); for (let c = 0; c < b._$targets.length; c++) { const d = a(b._$targets[c]); d.is(b._activeFilter) ? b._$show = b._$show.add(d) : b._$hide = b._$hide.add(d); }b._execAction('_filter', 1); },
    _sort() { const a = this; const b = function (a) { for (var b = a.slice(), c = b.length, d = c; d--;) { const e = parseInt(Math.random() * c); const f = b[d]; b[d] = b[e], b[e] = f; } return b; }; a._execAction('_sort', 0), a._startOrder = []; for (let c = 0; c < a._$targets.length; c++) { const d = a._$targets[c]; a._startOrder.push(d); } switch (a._newSort[0].sortBy) { case 'default': a._newOrder = a._origOrder; break; case 'random': a._newOrder = b(a._startOrder); break; case 'custom': a._newOrder = a._newSort[0].order; break; default: a._newOrder = a._startOrder.concat().sort((b, c) => a._compare(b, c)); }a._execAction('_sort', 1); },
    _compare(a, b, c) { c = c || 0; const d = this; const e = d._newSort[c].order; const f = function (a) { return a.dataset[d._newSort[c].sortBy] || 0; }; const g = isNaN(1 * f(a)) ? f(a).toLowerCase() : 1 * f(a); const h = isNaN(1 * f(b)) ? f(b).toLowerCase() : 1 * f(b); return h > g ? e === 'asc' ? -1 : 1 : g > h ? e === 'asc' ? 1 : -1 : g === h && d._newSort.length > c + 1 ? d._compare(a, b, c + 1) : 0; },
    _printSort(a) { const b = this; const c = a ? b._startOrder : b._newOrder; const d = b._$parent[0].querySelectorAll(b.selectors.target); const e = d.length ? d[d.length - 1].nextElementSibling : null; const f = document.createDocumentFragment(); b._execAction('_printSort', 0, arguments); for (var g = 0; g < d.length; g++) { const h = d[g]; const i = h.nextSibling; h.style.position !== 'absolute' && (i && i.nodeName === '#text' && b._$parent[0].removeChild(i), b._$parent[0].removeChild(h)); } for (var g = 0; g < c.length; g++) { const j = c[g]; if (b._newSort[0].sortBy !== 'default' || b._newSort[0].order !== 'desc' || a)f.appendChild(j), f.appendChild(document.createTextNode(' ')); else { const k = f.firstChild; f.insertBefore(j, k), f.insertBefore(document.createTextNode(' '), j); } }e ? b._$parent[0].insertBefore(f, e) : b._$parent[0].appendChild(f), b._execAction('_printSort', 1, arguments); },
    _parseSort(a) { for (var b = this, c = typeof a === 'string' ? a.split(' ') : [a], d = [], e = 0; e < c.length; e++) { const f = typeof a === 'string' ? c[e].split(':') : ['custom', c[e]]; const g = { sortBy: b._helpers._camelCase(f[0]), order: f[1] || 'asc' }; if (d.push(g), g.sortBy === 'default' || g.sortBy === 'random') break; } return b._execFilter('_parseSort', d, arguments); },
    _parseEffects() {
      const a = this; const b = {
        opacity: '', transformIn: '', transformOut: '', filter: '',
      }; const c = function (b, c, d) { if (a.animation.effects.indexOf(b) > -1) { if (c) { const e = a.animation.effects.indexOf(`${b}(`); if (e > -1) { const f = a.animation.effects.substring(e); const g = /\(([^)]+)\)/.exec(f); const h = g[1]; return { val: h }; } } return !0; } return !1; }; const d = function (a, b) { return b ? a.charAt(0) === '-' ? a.substr(1, a.length) : `-${a}` : a; }; const e = function (a, e) { for (let f = [['scale', '.01'], ['translateX', '20px'], ['translateY', '20px'], ['translateZ', '20px'], ['rotateX', '90deg'], ['rotateY', '90deg'], ['rotateZ', '180deg']], g = 0; g < f.length; g++) { const h = f[g][0]; const i = f[g][1]; const j = e && h !== 'scale'; b[a] += c(h) ? `${h}(${d(c(h, !0).val || i, j)}) ` : ''; } }; return b.opacity = c('fade') ? c('fade', !0).val || '0' : '1', e('transformIn'), a.animation.reverseOut ? e('transformOut', !0) : b.transformOut = b.transformIn, b.transition = {}, b.transition = a._getPrefixedCSS('transition', `all ${a.animation.duration}ms ${a.animation.easing}, opacity ${a.animation.duration}ms linear`), a.animation.stagger = c('stagger') ? !0 : !1, a.animation.staggerDuration = parseInt(c('stagger') && c('stagger', !0).val ? c('stagger', !0).val : 100), a._execFilter('_parseEffects', b);
    },
    _buildState(a) {
      const b = this; let c = {}; return b._execAction('_buildState', 0), c = {
        activeFilter: b._activeFilter === '' ? 'none' : b._activeFilter, activeSort: a && b._newSortString ? b._newSortString : b._activeSort, fail: !b._$show.length && b._activeFilter !== '', $targets: b._$targets, $show: b._$show, $hide: b._$hide, totalTargets: b._$targets.length, totalShow: b._$show.length, totalHide: b._$hide.length, display: a && b._newDisplay ? b._newDisplay : b.layout.display,
      }, a ? b._execFilter('_buildState', c) : (b._state = c, void b._execAction('_buildState', 1));
    },
    _goMix(a) { const b = this; const c = function () { b._chrome && b._chrome === 31 && f(b._$parent[0]), b._setInter(), d(); }; var d = function () { const a = window.pageYOffset; const c = window.pageXOffset; document.documentElement.scrollHeight; b._getInterMixData(), b._setFinal(), b._getFinalMixData(), window.pageYOffset !== a && window.scrollTo(c, a), b._prepTargets(), window.requestAnimationFrame ? requestAnimationFrame(e) : setTimeout(() => { e(); }, 20); }; var e = function () { b._animateTargets(), b._targetsBound === 0 && b._cleanUp(); }; var f = function (a) { const b = a.parentElement; const c = document.createElement('div'); const d = document.createDocumentFragment(); b.insertBefore(c, a), d.appendChild(a), b.replaceChild(a, c); }; const g = b._buildState(!0); b._execAction('_goMix', 0, arguments), !b.animation.duration && (a = !1), b._mixing = !0, b._$container.removeClass(b.layout.containerClassFail), typeof b.callbacks.onMixStart === 'function' && b.callbacks.onMixStart.call(b._domNode, b._state, g, b), b._$container.trigger('mixStart', [b._state, g, b]), b._getOrigMixData(), a && !b._suckMode ? window.requestAnimationFrame ? requestAnimationFrame(c) : c() : b._cleanUp(), b._execAction('_goMix', 1, arguments); },
    _getTargetData(a, b) { let c; const d = this; a.dataset[`${b}PosX`] = a.offsetLeft, a.dataset[`${b}PosY`] = a.offsetTop, d.animation.animateResizeTargets && (c = d._suckMode ? { marginBottom: '', marginRight: '' } : window.getComputedStyle(a), a.dataset[`${b}MarginBottom`] = parseInt(c.marginBottom), a.dataset[`${b}MarginRight`] = parseInt(c.marginRight), a.dataset[`${b}Width`] = a.offsetWidth, a.dataset[`${b}Height`] = a.offsetHeight); },
    _getOrigMixData() { const a = this; const b = a._suckMode ? { boxSizing: '' } : window.getComputedStyle(a._$parent[0]); const c = b.boxSizing || b[`${a._vendor}BoxSizing`]; a._incPadding = c === 'border-box', a._execAction('_getOrigMixData', 0), !a._suckMode && (a.effects = a._parseEffects()), a._$toHide = a._$hide.filter(':visible'), a._$toShow = a._$show.filter(':hidden'), a._$pre = a._$targets.filter(':visible'), a._startHeight = a._incPadding ? a._$parent.outerHeight() : a._$parent.height(); for (let d = 0; d < a._$pre.length; d++) { const e = a._$pre[d]; a._getTargetData(e, 'orig'); }a._execAction('_getOrigMixData', 1); },
    _setInter() { const a = this; a._execAction('_setInter', 0), a._changingLayout && a.animation.animateChangeLayout ? (a._$toShow.css('display', a._newDisplay), a._changingClass && a._$container.removeClass(a.layout.containerClass).addClass(a._newClass)) : a._$toShow.css('display', a.layout.display), a._execAction('_setInter', 1); },
    _getInterMixData() { const a = this; a._execAction('_getInterMixData', 0); for (var b = 0; b < a._$toShow.length; b++) { var c = a._$toShow[b]; a._getTargetData(c, 'inter'); } for (var b = 0; b < a._$pre.length; b++) { var c = a._$pre[b]; a._getTargetData(c, 'inter'); }a._execAction('_getInterMixData', 1); },
    _setFinal() { const a = this; a._execAction('_setFinal', 0), a._sorting && a._printSort(), a._$toHide.removeStyle('display'), a._changingLayout && a.animation.animateChangeLayout && a._$pre.css('display', a._newDisplay), a._execAction('_setFinal', 1); },
    _getFinalMixData() { const a = this; a._execAction('_getFinalMixData', 0); for (var b = 0; b < a._$toShow.length; b++) { var c = a._$toShow[b]; a._getTargetData(c, 'final'); } for (var b = 0; b < a._$pre.length; b++) { var c = a._$pre[b]; a._getTargetData(c, 'final'); }a._newHeight = a._incPadding ? a._$parent.outerHeight() : a._$parent.height(), a._sorting && a._printSort(!0), a._$toShow.removeStyle('display'), a._$pre.css('display', a.layout.display), a._changingClass && a.animation.animateChangeLayout && a._$container.removeClass(a._newClass).addClass(a.layout.containerClass), a._execAction('_getFinalMixData', 1); },
    _prepTargets() { const b = this; var c = { _in: b._getPrefixedCSS('transform', b.effects.transformIn), _out: b._getPrefixedCSS('transform', b.effects.transformOut) }; b._execAction('_prepTargets', 0), b.animation.animateResizeContainer && b._$parent.css('height', `${b._startHeight}px`); for (var d = 0; d < b._$toShow.length; d++) { var e = b._$toShow[d]; var f = a(e); e.style.opacity = b.effects.opacity, e.style.display = b._changingLayout && b.animation.animateChangeLayout ? b._newDisplay : b.layout.display, f.css(c._in), b.animation.animateResizeTargets && (e.style.width = `${e.dataset.finalWidth}px`, e.style.height = `${e.dataset.finalHeight}px`, e.style.marginRight = `${-(e.dataset.finalWidth - e.dataset.interWidth) + 1 * e.dataset.finalMarginRight}px`, e.style.marginBottom = `${-(e.dataset.finalHeight - e.dataset.interHeight) + 1 * e.dataset.finalMarginBottom}px`); } for (var d = 0; d < b._$pre.length; d++) { var e = b._$pre[d]; var f = a(e); const g = { x: e.dataset.origPosX - e.dataset.interPosX, y: e.dataset.origPosY - e.dataset.interPosY }; var c = b._getPrefixedCSS('transform', `translate(${g.x}px,${g.y}px)`); f.css(c), b.animation.animateResizeTargets && (e.style.width = `${e.dataset.origWidth}px`, e.style.height = `${e.dataset.origHeight}px`, e.dataset.origWidth - e.dataset.finalWidth && (e.style.marginRight = `${-(e.dataset.origWidth - e.dataset.interWidth) + 1 * e.dataset.origMarginRight}px`), e.dataset.origHeight - e.dataset.finalHeight && (e.style.marginBottom = `${-(e.dataset.origHeight - e.dataset.interHeight) + 1 * e.dataset.origMarginBottom}px`)); }b._execAction('_prepTargets', 1); },
    _animateTargets() { const b = this; b._execAction('_animateTargets', 0), b._targetsDone = 0, b._targetsBound = 0, b._$parent.css(b._getPrefixedCSS('perspective', `${b.animation.perspectiveDistance}px`)).css(b._getPrefixedCSS('perspective-origin', b.animation.perspectiveOrigin)), b.animation.animateResizeContainer && b._$parent.css(b._getPrefixedCSS('transition', `height ${b.animation.duration}ms ease`)).css('height', `${b._newHeight}px`); for (var c = 0; c < b._$toShow.length; c++) { var d = b._$toShow[c]; var e = a(d); var f = { x: d.dataset.finalPosX - d.dataset.interPosX, y: d.dataset.finalPosY - d.dataset.interPosY }; var g = b._getDelay(c); const h = {}; d.style.opacity = ''; for (var i = 0; i < 2; i++) { var j = i === 0 ? j = b._prefix : ''; b._ff && b._ff <= 20 && (h[`${j}transition-property`] = 'all', h[`${j}transition-timing-function`] = `${b.animation.easing}ms`, h[`${j}transition-duration`] = `${b.animation.duration}ms`), h[`${j}transition-delay`] = `${g}ms`, h[`${j}transform`] = `translate(${f.x}px,${f.y}px)`; }(b.effects.transform || b.effects.opacity) && b._bindTargetDone(e), b._ff && b._ff <= 20 ? e.css(h) : e.css(b.effects.transition).css(h); } for (var c = 0; c < b._$pre.length; c++) { var d = b._$pre[c]; var e = a(d); var f = { x: d.dataset.finalPosX - d.dataset.interPosX, y: d.dataset.finalPosY - d.dataset.interPosY }; var g = b._getDelay(c); (d.dataset.finalPosX !== d.dataset.origPosX || d.dataset.finalPosY !== d.dataset.origPosY) && b._bindTargetDone(e), e.css(b._getPrefixedCSS('transition', `all ${b.animation.duration}ms ${b.animation.easing} ${g}ms`)), e.css(b._getPrefixedCSS('transform', `translate(${f.x}px,${f.y}px)`)), b.animation.animateResizeTargets && (d.dataset.origWidth - d.dataset.finalWidth && 1 * d.dataset.finalWidth && (d.style.width = `${d.dataset.finalWidth}px`, d.style.marginRight = `${-(d.dataset.finalWidth - d.dataset.interWidth) + 1 * d.dataset.finalMarginRight}px`), d.dataset.origHeight - d.dataset.finalHeight && 1 * d.dataset.finalHeight && (d.style.height = `${d.dataset.finalHeight}px`, d.style.marginBottom = `${-(d.dataset.finalHeight - d.dataset.interHeight) + 1 * d.dataset.finalMarginBottom}px`)); }b._changingClass && b._$container.removeClass(b.layout.containerClass).addClass(b._newClass); for (var c = 0; c < b._$toHide.length; c++) { for (var d = b._$toHide[c], e = a(d), g = b._getDelay(c), k = {}, i = 0; i < 2; i++) { var j = i === 0 ? j = b._prefix : ''; k[`${j}transition-delay`] = `${g}ms`, k[`${j}transform`] = b.effects.transformOut, k.opacity = b.effects.opacity; }e.css(b.effects.transition).css(k), (b.effects.transform || b.effects.opacity) && b._bindTargetDone(e); }b._execAction('_animateTargets', 1); },
    _bindTargetDone(b) { const c = this; const d = b[0]; c._execAction('_bindTargetDone', 0, arguments), d.dataset.bound || (d.dataset.bound = !0, c._targetsBound++, b.on('webkitTransitionEnd.mixItUp transitionend.mixItUp', (e) => { (e.originalEvent.propertyName.indexOf('transform') > -1 || e.originalEvent.propertyName.indexOf('opacity') > -1) && a(e.originalEvent.target).is(c.selectors.target) && (b.off('.mixItUp'), d.dataset.bound = '', c._targetDone()); })), c._execAction('_bindTargetDone', 1, arguments); },
    _targetDone() { const a = this; a._execAction('_targetDone', 0), a._targetsDone++, a._targetsDone === a._targetsBound && a._cleanUp(), a._execAction('_targetDone', 1); },
    _cleanUp() { const b = this; const c = b.animation.animateResizeTargets ? 'transform opacity width height margin-bottom margin-right' : 'transform opacity'; const d = function () { b._$targets.removeStyle('transition', b._prefix); }; b._execAction('_cleanUp', 0), b._changingLayout ? b._$show.css('display', b._newDisplay) : b._$show.css('display', b.layout.display), b._$targets.css(b._brake), b._$targets.removeStyle(c, b._prefix).removeAttr('data-inter-pos-x data-inter-pos-y data-final-pos-x data-final-pos-y data-orig-pos-x data-orig-pos-y data-orig-height data-orig-width data-final-height data-final-width data-inter-width data-inter-height data-orig-margin-right data-orig-margin-bottom data-inter-margin-right data-inter-margin-bottom data-final-margin-right data-final-margin-bottom'), b._$hide.removeStyle('display'), b._$parent.removeStyle('height transition perspective-distance perspective perspective-origin-x perspective-origin-y perspective-origin perspectiveOrigin', b._prefix), b._sorting && (b._printSort(), b._activeSort = b._newSortString, b._sorting = !1), b._changingLayout && (b._changingDisplay && (b.layout.display = b._newDisplay, b._changingDisplay = !1), b._changingClass && (b._$parent.removeClass(b.layout.containerClass).addClass(b._newClass), b.layout.containerClass = b._newClass, b._changingClass = !1), b._changingLayout = !1), b._refresh(), b._buildState(), b._state.fail && b._$container.addClass(b.layout.containerClassFail), b._$show = a(), b._$hide = a(), window.requestAnimationFrame && requestAnimationFrame(d), b._mixing = !1, typeof b.callbacks._user === 'function' && b.callbacks._user.call(b._domNode, b._state, b), typeof b.callbacks.onMixEnd === 'function' && b.callbacks.onMixEnd.call(b._domNode, b._state, b), b._$container.trigger('mixEnd', [b._state, b]), b._state.fail && (typeof b.callbacks.onMixFail === 'function' && b.callbacks.onMixFail.call(b._domNode, b._state, b), b._$container.trigger('mixFail', [b._state, b])), b._loading && (typeof b.callbacks.onMixLoad === 'function' && b.callbacks.onMixLoad.call(b._domNode, b._state, b), b._$container.trigger('mixLoad', [b._state, b])), b._queue.length && (b._execAction('_queue', 0), b.multiMix(b._queue[0][0], b._queue[0][1], b._queue[0][2]), b._queue.splice(0, 1)), b._execAction('_cleanUp', 1), b._loading = !1; },
    _getPrefixedCSS(a, b, c) { const d = this; const e = {}; let f = ''; let g = -1; for (g = 0; g < 2; g++)f = g === 0 ? d._prefix : '', c ? e[f + a] = f + b : e[f + a] = b; return d._execFilter('_getPrefixedCSS', e, arguments); },
    _getDelay(a) { const b = this; const c = typeof b.animation.staggerSequence === 'function' ? b.animation.staggerSequence.call(b._domNode, a, b._state) : a; const d = b.animation.stagger ? c * b.animation.staggerDuration : 0; return b._execFilter('_getDelay', d, arguments); },
    _parseMultiMixArgs(a) { for (var b = this, c = { command: null, animate: b.animation.enable, callback: null }, d = 0; d < a.length; d++) { const e = a[d]; e !== null && (typeof e === 'object' || typeof e === 'string' ? c.command = e : typeof e === 'boolean' ? c.animate = e : typeof e === 'function' && (c.callback = e)); } return b._execFilter('_parseMultiMixArgs', c, arguments); },
    _parseInsertArgs(b) {
      for (var c = this, d = {
          index: 0, $object: a(), multiMix: { filter: c._state.activeFilter }, callback: null,
        }, e = 0; e < b.length; e++) { const f = b[e]; typeof f === 'number' ? d.index = f : typeof f === 'object' && f instanceof a ? d.$object = f : typeof f === 'object' && c._helpers._isElement(f) ? d.$object = a(f) : typeof f === 'object' && f !== null ? d.multiMix = f : typeof f !== 'boolean' || f ? typeof f === 'function' && (d.callback = f) : d.multiMix = !1; } return c._execFilter('_parseInsertArgs', d, arguments);
    },
    _execAction(a, b, c) { const d = this; const e = b ? 'post' : 'pre'; if (!d._actions.isEmptyObject && d._actions.hasOwnProperty(a)) for (const f in d._actions[a][e])d._actions[a][e][f].call(d, c); },
    _execFilter(a, b, c) { const d = this; if (d._filters.isEmptyObject || !d._filters.hasOwnProperty(a)) return b; for (const e in d._filters[a]) return d._filters[a][e].call(d, c); },
    _helpers: { _camelCase(a) { return a.replace(/-([a-z])/g, (a) => a[1].toUpperCase()); }, _isElement(a) { return window.HTMLElement ? a instanceof HTMLElement : a !== null && a.nodeType === 1 && a.nodeName === 'string'; } },
    isMixing() { const a = this; return a._execFilter('isMixing', a._mixing); },
    filter() { const a = this; const b = a._parseMultiMixArgs(arguments); a._clicking && (a._toggleString = ''), a.multiMix({ filter: b.command }, b.animate, b.callback); },
    sort() { const a = this; const b = a._parseMultiMixArgs(arguments); a.multiMix({ sort: b.command }, b.animate, b.callback); },
    changeLayout() { const a = this; const b = a._parseMultiMixArgs(arguments); a.multiMix({ changeLayout: b.command }, b.animate, b.callback); },
    multiMix() { const a = this; const c = a._parseMultiMixArgs(arguments); if (a._execAction('multiMix', 0, arguments), a._mixing)a.animation.queue && a._queue.length < a.animation.queueLimit ? (a._queue.push(arguments), a.controls.enable && !a._clicking && a._updateControls(c.command), a._execAction('multiMixQueue', 1, arguments)) : (typeof a.callbacks.onMixBusy === 'function' && a.callbacks.onMixBusy.call(a._domNode, a._state, a), a._$container.trigger('mixBusy', [a._state, a]), a._execAction('multiMixBusy', 1, arguments)); else { a.controls.enable && !a._clicking && (a.controls.toggleFilterButtons && a._buildToggleArray(), a._updateControls(c.command, a.controls.toggleFilterButtons)), a._queue.length < 2 && (a._clicking = !1), delete a.callbacks._user, c.callback && (a.callbacks._user = c.callback); const d = c.command.sort; let e = c.command.filter; const f = c.command.changeLayout; a._refresh(), d && (a._newSort = a._parseSort(d), a._newSortString = d, a._sorting = !0, a._sort()), e !== b && (e = e === 'all' ? a.selectors.target : e, a._activeFilter = e), a._filter(), f && (a._newDisplay = typeof f === 'string' ? f : f.display || a.layout.display, a._newClass = f.containerClass || '', (a._newDisplay !== a.layout.display || a._newClass !== a.layout.containerClass) && (a._changingLayout = !0, a._changingClass = a._newClass !== a.layout.containerClass, a._changingDisplay = a._newDisplay !== a.layout.display)), a._$targets.css(a._brake), a._goMix(c.animate ^ a.animation.enable ? c.animate : a.animation.enable), a._execAction('multiMix', 1, arguments); } },
    insert() { const a = this; const b = a._parseInsertArgs(arguments); const c = typeof b.callback === 'function' ? b.callback : null; const d = document.createDocumentFragment(); const e = (function () { return a._refresh(), a._$targets.length ? b.index < a._$targets.length || !a._$targets.length ? a._$targets[b.index] : a._$targets[a._$targets.length - 1].nextElementSibling : a._$parent[0].children[0]; }()); if (a._execAction('insert', 0, arguments), b.$object) { for (let f = 0; f < b.$object.length; f++) { const g = b.$object[f]; d.appendChild(g), d.appendChild(document.createTextNode(' ')); }a._$parent[0].insertBefore(d, e); }a._execAction('insert', 1, arguments), typeof b.multiMix === 'object' && a.multiMix(b.multiMix, c); },
    prepend() { const a = this; const b = a._parseInsertArgs(arguments); a.insert(0, b.$object, b.multiMix, b.callback); },
    append() { const a = this; const b = a._parseInsertArgs(arguments); a.insert(a._state.totalTargets, b.$object, b.multiMix, b.callback); },
    getOption(a) { const c = this; const d = function (a, c) { for (var d = c.split('.'), e = d.pop(), f = d.length, g = 1, h = d[0] || c; (a = a[h]) && f > g;)h = d[g], g++; return a !== b ? a[e] !== b ? a[e] : a : void 0; }; return a ? c._execFilter('getOption', d(c, a), arguments) : c; },
    setOptions(b) { const c = this; c._execAction('setOptions', 0, arguments), typeof b === 'object' && a.extend(!0, c, b), c._execAction('setOptions', 1, arguments); },
    getState() { const a = this; return a._execFilter('getState', a._state, a); },
    forceRefresh() { const a = this; a._refresh(!1, !0); },
    destroy(b) { const c = this; const d = a.MixItUp.prototype._bound._filter; const e = a.MixItUp.prototype._bound._sort; c._execAction('destroy', 0, arguments), c._$body.add(a(c.selectors.sort)).add(a(c.selectors.filter)).off('.mixItUp'); for (let f = 0; f < c._$targets.length; f++) { const g = c._$targets[f]; b && (g.style.display = ''), delete g.mixParent; }c._execAction('destroy', 1, arguments), d[c.selectors.filter] && d[c.selectors.filter] > 1 ? d[c.selectors.filter]-- : d[c.selectors.filter] === 1 && delete d[c.selectors.filter], e[c.selectors.sort] && e[c.selectors.sort] > 1 ? e[c.selectors.sort]-- : e[c.selectors.sort] === 1 && delete e[c.selectors.sort], delete a.MixItUp.prototype._instances[c._id]; },
  }, a.fn.mixItUp = function () {
    let c; const d = arguments; const e = []; const f = function (b, c) {
      const d = new a.MixItUp(); const
        e = function () { return (`00000${(16777216 * Math.random() << 0).toString(16)}`).substr(-6).toUpperCase(); }; d._execAction('_instantiate', 0, arguments), b.id = b.id ? b.id : `MixItUp${e()}`, d._instances[b.id] || (d._instances[b.id] = d, d._init(b, c)), d._execAction('_instantiate', 1, arguments);
    }; return c = this.each(function () { if (d && typeof d[0] === 'string') { const c = a.MixItUp.prototype._instances[this.id]; if (d[0] === 'isLoaded')e.push(c ? !0 : !1); else { const g = c[d[0]](d[1], d[2], d[3]); g !== b && e.push(g); } } else f(this, d[0]); }), e.length ? e.length > 1 ? e : e[0] : c;
  }, a.fn.removeStyle = function (c, d) { return d = d || '', this.each(function () { for (var e = this, f = c.split(' '), g = 0; g < f.length; g++) for (let h = 0; h < 4; h++) { switch (h) { case 0: var i = f[g]; break; case 1: var i = a.MixItUp.prototype._helpers._camelCase(i); break; case 2: var i = d + f[g]; break; case 3: var i = a.MixItUp.prototype._helpers._camelCase(d + f[g]); } if (e.style[i] !== b && typeof e.style[i] !== 'unknown' && e.style[i].length > 0 && (e.style[i] = ''), !d && h === 1) break; }e.attributes && e.attributes.style && e.attributes.style !== b && e.attributes.style.value === '' && e.attributes.removeNamedItem('style'); }); };
}(jQuery));
