/*!
 * Bootstrap-select v1.10.0 (http://silviomoreto.github.io/bootstrap-select)
 *
 * Copyright 2013-2016 bootstrap-select
 * Licensed under MIT (https://github.com/silviomoreto/bootstrap-select/blob/master/LICENSE)
 */
!(function (a, b) { typeof define === 'function' && define.amd ? define(['jquery'], (a) => b(a)) : typeof exports === 'object' ? module.exports = b(require('jquery')) : b(jQuery); }(this, (a) => {
  !(function (a) {
    function b(b) { const c = [{ re: /[\xC0-\xC6]/g, ch: 'A' }, { re: /[\xE0-\xE6]/g, ch: 'a' }, { re: /[\xC8-\xCB]/g, ch: 'E' }, { re: /[\xE8-\xEB]/g, ch: 'e' }, { re: /[\xCC-\xCF]/g, ch: 'I' }, { re: /[\xEC-\xEF]/g, ch: 'i' }, { re: /[\xD2-\xD6]/g, ch: 'O' }, { re: /[\xF2-\xF6]/g, ch: 'o' }, { re: /[\xD9-\xDC]/g, ch: 'U' }, { re: /[\xF9-\xFC]/g, ch: 'u' }, { re: /[\xC7-\xE7]/g, ch: 'c' }, { re: /[\xD1]/g, ch: 'N' }, { re: /[\xF1]/g, ch: 'n' }]; return a.each(c, function () { b = b.replace(this.re, this.ch); }), b; } function c(a) {
      const b = {
        '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#x27;', '`': '&#x60;',
      }; const c = `(?:${Object.keys(b).join('|')})`; const d = new RegExp(c); const e = new RegExp(c, 'g'); const f = a == null ? '' : `${a}`; return d.test(f) ? f.replace(e, (a) => b[a]) : f;
    } function d(b, c) { const d = arguments; const f = b; const g = c; [].shift.apply(d); let h; const i = this.each(function () { const b = a(this); if (b.is('select')) { let c = b.data('selectpicker'); const i = typeof f === 'object' && f; if (c) { if (i) for (const j in i)i.hasOwnProperty(j) && (c.options[j] = i[j]); } else { const k = a.extend({}, e.DEFAULTS, a.fn.selectpicker.defaults || {}, b.data(), i); k.template = a.extend({}, e.DEFAULTS.template, a.fn.selectpicker.defaults ? a.fn.selectpicker.defaults.template : {}, b.data().template, i.template), b.data('selectpicker', c = new e(this, k, g)); } typeof f === 'string' && (h = c[f] instanceof Function ? c[f].apply(c, d) : c.options[f]); } }); return typeof h !== 'undefined' ? h : i; }String.prototype.includes || !(function () { const a = {}.toString; const b = (function () { try { const a = {}; const b = Object.defineProperty; var c = b(a, a, a) && b; } catch (d) {} return c; }()); const c = ''.indexOf; const d = function (b) { if (this == null) throw new TypeError(); const d = String(this); if (b && a.call(b) == '[object RegExp]') throw new TypeError(); const e = d.length; const f = String(b); const g = f.length; const h = arguments.length > 1 ? arguments[1] : void 0; let i = h ? Number(h) : 0; i != i && (i = 0); const j = Math.min(Math.max(i, 0), e); return g + j > e ? !1 : c.call(d, f, i) != -1; }; b ? b(String.prototype, 'includes', { value: d, configurable: !0, writable: !0 }) : String.prototype.includes = d; }()), String.prototype.startsWith || !(function () { const a = (function () { try { const a = {}; const b = Object.defineProperty; var c = b(a, a, a) && b; } catch (d) {} return c; }()); const b = {}.toString; const c = function (a) { if (this == null) throw new TypeError(); const c = String(this); if (a && b.call(a) == '[object RegExp]') throw new TypeError(); const d = c.length; const e = String(a); const f = e.length; const g = arguments.length > 1 ? arguments[1] : void 0; let h = g ? Number(g) : 0; h != h && (h = 0); const i = Math.min(Math.max(h, 0), d); if (f + i > d) return !1; for (let j = -1; ++j < f;) if (c.charCodeAt(i + j) != e.charCodeAt(j)) return !1; return !0; }; a ? a(String.prototype, 'startsWith', { value: c, configurable: !0, writable: !0 }) : String.prototype.startsWith = c; }()), Object.keys || (Object.keys = function (a, b, c) { c = []; for (b in a)c.hasOwnProperty.call(a, b) && c.push(b); return c; }), a.fn.triggerNative = function (a) { let b; const c = this[0]; c.dispatchEvent ? (typeof Event === 'function' ? b = new Event(a, { bubbles: !0 }) : (b = document.createEvent('Event'), b.initEvent(a, !0, !1)), c.dispatchEvent(b)) : (c.fireEvent && (b = document.createEventObject(), b.eventType = a, c.fireEvent(`on${a}`, b)), this.trigger(a)); }, a.expr[':'].icontains = function (b, c, d) { const e = a(b); const f = (e.data('tokens') || e.text()).toUpperCase(); return f.includes(d[3].toUpperCase()); }, a.expr[':'].ibegins = function (b, c, d) { const e = a(b); const f = (e.data('tokens') || e.text()).toUpperCase(); return f.startsWith(d[3].toUpperCase()); }, a.expr[':'].aicontains = function (b, c, d) { const e = a(b); const f = (e.data('tokens') || e.data('normalizedText') || e.text()).toUpperCase(); return f.includes(d[3].toUpperCase()); }, a.expr[':'].aibegins = function (b, c, d) { const e = a(b); const f = (e.data('tokens') || e.data('normalizedText') || e.text()).toUpperCase(); return f.startsWith(d[3].toUpperCase()); }; var e = function (b, c, d) { d && (d.stopPropagation(), d.preventDefault()), this.$element = a(b), this.$newElement = null, this.$button = null, this.$menu = null, this.$lis = null, this.options = c, this.options.title === null && (this.options.title = this.$element.attr('title')), this.val = e.prototype.val, this.render = e.prototype.render, this.refresh = e.prototype.refresh, this.setStyle = e.prototype.setStyle, this.selectAll = e.prototype.selectAll, this.deselectAll = e.prototype.deselectAll, this.destroy = e.prototype.destroy, this.remove = e.prototype.remove, this.show = e.prototype.show, this.hide = e.prototype.hide, this.init(); }; e.VERSION = '1.10.0', e.DEFAULTS = {
      noneSelectedText: 'Nothing selected', noneResultsText: 'No results matched {0}', countSelectedText(a, b) { return a == 1 ? '{0} item selected' : '{0} items selected'; }, maxOptionsText(a, b) { return [a == 1 ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)', b == 1 ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)']; }, selectAllText: 'Select All', deselectAllText: 'Deselect All', doneButton: !1, doneButtonText: 'Close', multipleSeparator: ', ', styleBase: 'btn', style: 'btn-default', size: 'auto', title: null, selectedTextFormat: 'values', width: !1, container: !1, hideDisabled: !1, showSubtext: !1, showIcon: !0, showContent: !0, dropupAuto: !0, header: !1, liveSearch: !1, liveSearchPlaceholder: null, liveSearchNormalize: !1, liveSearchStyle: 'contains', actionsBox: !1, iconBase: 'glyphicon', tickIcon: 'glyphicon-ok', showTick: !1, template: { caret: '<span class="caret"></span>' }, maxOptions: !1, mobile: !1, selectOnTab: !1, dropdownAlignRight: !1,
    }, e.prototype = {
      constructor: e,
      init() {
        const b = this; const c = this.$element.attr('id'); this.$element.addClass('bs-select-hidden'), this.liObj = {}, this.multiple = this.$element.prop('multiple'), this.autofocus = this.$element.prop('autofocus'), this.$newElement = this.createView(), this.$element.after(this.$newElement).appendTo(this.$newElement), this.$button = this.$newElement.children('button'), this.$menu = this.$newElement.children('.dropdown-menu'), this.$menuInner = this.$menu.children('.inner'), this.$searchbox = this.$menu.find('input'), this.$element.removeClass('bs-select-hidden'), this.options.dropdownAlignRight && this.$menu.addClass('dropdown-menu-right'), typeof c !== 'undefined' && (this.$button.attr('data-id', c), a(`label[for="${c}"]`).click((a) => { a.preventDefault(), b.$button.focus(); })), this.checkDisabled(), this.clickListener(), this.options.liveSearch && this.liveSearchListener(), this.render(), this.setStyle(), this.setWidth(), this.options.container && this.selectPosition(), this.$menu.data('this', this), this.$newElement.data('this', this), this.options.mobile && this.mobile(), this.$newElement.on({
          'hide.bs.dropdown': function (a) { b.$element.trigger('hide.bs.select', a); }, 'hidden.bs.dropdown': function (a) { b.$element.trigger('hidden.bs.select', a); }, 'show.bs.dropdown': function (a) { b.$element.trigger('show.bs.select', a); }, 'shown.bs.dropdown': function (a) { b.$element.trigger('shown.bs.select', a); },
        }), b.$element[0].hasAttribute('required') && this.$element.on('invalid', () => { b.$button.addClass('bs-invalid').focus(), b.$element.on({ 'focus.bs.select': function () { b.$button.focus(), b.$element.off('focus.bs.select'); }, 'shown.bs.select': function () { b.$element.val(b.$element.val()).off('shown.bs.select'); }, 'rendered.bs.select': function () { this.validity.valid && b.$button.removeClass('bs-invalid'), b.$element.off('rendered.bs.select'); } }); }), setTimeout(() => { b.$element.trigger('loaded.bs.select'); });
      },
      createDropdown() {
        const b = this.multiple || this.options.showTick ? ' show-tick' : ''; const d = this.$element.parent().hasClass('input-group') ? ' input-group-btn' : ''; const e = this.autofocus ? ' autofocus' : ''; const f = this.options.header ? `<div class="popover-title"><button type="button" class="close" aria-hidden="true">&times;</button>${this.options.header}</div>` : ''; const g = this.options.liveSearch ? `<div class="bs-searchbox"><input type="text" class="form-control" autocomplete="off"${this.options.liveSearchPlaceholder === null ? '' : ` placeholder="${c(this.options.liveSearchPlaceholder)}"`}></div>` : ''; const h = this.multiple && this.options.actionsBox ? `<div class="bs-actionsbox"><div class="btn-group btn-group-sm btn-block"><button type="button" class="actions-btn bs-select-all btn btn-default">${this.options.selectAllText}</button><button type="button" class="actions-btn bs-deselect-all btn btn-default">${this.options.deselectAllText}</button></div></div>` : ''; const i = this.multiple && this.options.doneButton ? `<div class="bs-donebutton"><div class="btn-group btn-block"><button type="button" class="btn btn-sm btn-default">${this.options.doneButtonText}</button></div></div>` : ''; const
          j = `<div class="btn-group bootstrap-select${b}${d}"><button type="button" class="${this.options.styleBase} dropdown-toggle" data-toggle="dropdown"${e}><span class="filter-option pull-left"></span>&nbsp;<span class="bs-caret">${this.options.template.caret}</span></button><div class="dropdown-menu open">${f}${g}${h}<ul class="dropdown-menu inner" role="menu"></ul>${i}</div></div>`; return a(j);
      },
      createView() { const a = this.createDropdown(); const b = this.createLi(); return a.find('ul')[0].innerHTML = b, a; },
      reloadLi() { this.destroyLi(); const a = this.createLi(); this.$menuInner[0].innerHTML = a; },
      destroyLi() { this.$menu.find('li').remove(); },
      createLi() { const d = this; const e = []; let f = 0; const g = document.createElement('option'); let h = -1; const i = function (a, b, c, d) { return `<li${typeof c !== 'undefined' & c !== '' ? ` class="${c}"` : ''}${typeof b !== 'undefined' & b !== null ? ` data-original-index="${b}"` : ''}${typeof d !== 'undefined' & d !== null ? `data-optgroup="${d}"` : ''}>${a}</li>`; }; const j = function (a, e, f, g) { return `<a tabindex="0"${typeof e !== 'undefined' ? ` class="${e}"` : ''}${typeof f !== 'undefined' ? ` style="${f}"` : ''}${d.options.liveSearchNormalize ? ` data-normalized-text="${b(c(a))}"` : ''}${typeof g !== 'undefined' || g !== null ? ` data-tokens="${g}"` : ''}>${a}<span class="${d.options.iconBase} ${d.options.tickIcon} check-mark"></span></a>`; }; if (this.options.title && !this.multiple && (h--, !this.$element.find('.bs-title-option').length)) { const k = this.$element[0]; g.className = 'bs-title-option', g.appendChild(document.createTextNode(this.options.title)), g.value = '', k.insertBefore(g, k.firstChild), void 0 === a(k.options[k.selectedIndex]).attr('selected') && (g.selected = !0); } return this.$element.find('option').each(function (b) { const c = a(this); if (h++, !c.hasClass('bs-title-option')) { const g = this.className || ''; const k = this.style.cssText; let l = c.data('content') ? c.data('content') : c.html(); const m = c.data('tokens') ? c.data('tokens') : null; const n = typeof c.data('subtext') !== 'undefined' ? `<small class="text-muted">${c.data('subtext')}</small>` : ''; let o = typeof c.data('icon') !== 'undefined' ? `<span class="${d.options.iconBase} ${c.data('icon')}"></span> ` : ''; const p = this.parentNode.tagName === 'OPTGROUP'; const q = this.disabled || p && this.parentNode.disabled; if (o !== '' && q && (o = `<span>${o}</span>`), d.options.hideDisabled && q && !p) return void h--; if (c.data('content') || (l = `${o}<span class="text">${l}${n}</span>`), p && c.data('divider') !== !0) { const r = ` ${this.parentNode.className}` || ''; if (c.index() === 0) { f += 1; let s = this.parentNode.label; const t = typeof c.parent().data('subtext') !== 'undefined' ? `<small class="text-muted">${c.parent().data('subtext')}</small>` : ''; const u = c.parent().data('icon') ? `<span class="${d.options.iconBase} ${c.parent().data('icon')}"></span> ` : ''; s = `${u}<span class="text">${s}${t}</span>`, b !== 0 && e.length > 0 && (h++, e.push(i('', null, 'divider', `${f}div`))), h++, e.push(i(s, null, `dropdown-header${r}`, f)); } if (d.options.hideDisabled && q) return void h--; e.push(i(j(l, `opt ${g}${r}`, k, m), b, '', f)); } else c.data('divider') === !0 ? e.push(i('', b, 'divider')) : c.data('hidden') === !0 ? e.push(i(j(l, g, k, m), b, 'hidden is-hidden')) : (this.previousElementSibling && this.previousElementSibling.tagName === 'OPTGROUP' && (h++, e.push(i('', null, 'divider', `${f}div`))), e.push(i(j(l, g, k, m), b))); d.liObj[b] = h; } }), this.multiple || this.$element.find('option:selected').length !== 0 || this.options.title || this.$element.find('option').eq(0).prop('selected', !0).attr('selected', 'selected'), e.join(''); },
      findLis() { return this.$lis == null && (this.$lis = this.$menu.find('li')), this.$lis; },
      render(b) { let c; const d = this; b !== !1 && this.$element.find('option').each(function (a) { const b = d.findLis().eq(d.liObj[a]); d.setDisabled(a, this.disabled || this.parentNode.tagName === 'OPTGROUP' && this.parentNode.disabled, b), d.setSelected(a, this.selected, b); }), this.tabIndex(); const e = this.$element.find('option').map(function () { if (this.selected) { if (d.options.hideDisabled && (this.disabled || this.parentNode.tagName === 'OPTGROUP' && this.parentNode.disabled)) return; let b; const c = a(this); const e = c.data('icon') && d.options.showIcon ? `<i class="${d.options.iconBase} ${c.data('icon')}"></i> ` : ''; return b = d.options.showSubtext && c.data('subtext') && !d.multiple ? ` <small class="text-muted">${c.data('subtext')}</small>` : '', typeof c.attr('title') !== 'undefined' ? c.attr('title') : c.data('content') && d.options.showContent ? c.data('content') : e + c.html() + b; } }).toArray(); let f = this.multiple ? e.join(this.options.multipleSeparator) : e[0]; if (this.multiple && this.options.selectedTextFormat.indexOf('count') > -1) { const g = this.options.selectedTextFormat.split('>'); if (g.length > 1 && e.length > g[1] || g.length == 1 && e.length >= 2) { c = this.options.hideDisabled ? ', [disabled]' : ''; const h = this.$element.find('option').not(`[data-divider="true"], [data-hidden="true"]${c}`).length; const i = typeof this.options.countSelectedText === 'function' ? this.options.countSelectedText(e.length, h) : this.options.countSelectedText; f = i.replace('{0}', e.length.toString()).replace('{1}', h.toString()); } } void 0 == this.options.title && (this.options.title = this.$element.attr('title')), this.options.selectedTextFormat == 'static' && (f = this.options.title), f || (f = typeof this.options.title !== 'undefined' ? this.options.title : this.options.noneSelectedText), this.$button.attr('title', a.trim(f.replace(/<[^>]*>?/g, ''))), this.$button.children('.filter-option').html(f), this.$element.trigger('rendered.bs.select'); },
      setStyle(a, b) { this.$element.attr('class') && this.$newElement.addClass(this.$element.attr('class').replace(/selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi, '')); const c = a || this.options.style; b == 'add' ? this.$button.addClass(c) : b == 'remove' ? this.$button.removeClass(c) : (this.$button.removeClass(this.options.style), this.$button.addClass(c)); },
      liHeight(b) {
        if (b || this.options.size !== !1 && !this.sizeInfo) {
          const c = document.createElement('div'); const d = document.createElement('div'); const e = document.createElement('ul'); const f = document.createElement('li'); const g = document.createElement('li'); const h = document.createElement('a'); const i = document.createElement('span'); const j = this.options.header && this.$menu.find('.popover-title').length > 0 ? this.$menu.find('.popover-title')[0].cloneNode(!0) : null; const k = this.options.liveSearch ? document.createElement('div') : null; const l = this.options.actionsBox && this.multiple && this.$menu.find('.bs-actionsbox').length > 0 ? this.$menu.find('.bs-actionsbox')[0].cloneNode(!0) : null; const m = this.options.doneButton && this.multiple && this.$menu.find('.bs-donebutton').length > 0 ? this.$menu.find('.bs-donebutton')[0].cloneNode(!0) : null; if (i.className = 'text', c.className = `${this.$menu[0].parentNode.className} open`, d.className = 'dropdown-menu open', e.className = 'dropdown-menu inner', f.className = 'divider', i.appendChild(document.createTextNode('Inner text')), h.appendChild(i), g.appendChild(h), e.appendChild(g), e.appendChild(f), j && d.appendChild(j), k) { const n = document.createElement('span'); k.className = 'bs-searchbox', n.className = 'form-control', k.appendChild(n), d.appendChild(k); }l && d.appendChild(l), d.appendChild(e), m && d.appendChild(m), c.appendChild(d), document.body.appendChild(c); const o = h.offsetHeight; const p = j ? j.offsetHeight : 0; const q = k ? k.offsetHeight : 0; const r = l ? l.offsetHeight : 0; const s = m ? m.offsetHeight : 0; const t = a(f).outerHeight(!0); const u = typeof getComputedStyle === 'function' ? getComputedStyle(d) : !1; const v = u ? null : a(d); const w = parseInt(u ? u.paddingTop : v.css('paddingTop')) + parseInt(u ? u.paddingBottom : v.css('paddingBottom')) + parseInt(u ? u.borderTopWidth : v.css('borderTopWidth')) + parseInt(u ? u.borderBottomWidth : v.css('borderBottomWidth')); const x = w + parseInt(u ? u.marginTop : v.css('marginTop')) + parseInt(u ? u.marginBottom : v.css('marginBottom')) + 2; document.body.removeChild(c), this.sizeInfo = {
            liHeight: o, headerHeight: p, searchHeight: q, actionsHeight: r, doneButtonHeight: s, dividerHeight: t, menuPadding: w, menuExtras: x,
          };
        }
      },
      setSize() {
        if (this.findLis(), this.liHeight(), this.options.header && this.$menu.css('padding-top', 0), this.options.size !== !1) {
          let b; let c; let d; let e; const f = this; const g = this.$menu; const h = this.$menuInner; const i = a(window); const j = this.$newElement[0].offsetHeight; const k = this.sizeInfo.liHeight; const l = this.sizeInfo.headerHeight; const m = this.sizeInfo.searchHeight; const n = this.sizeInfo.actionsHeight; const o = this.sizeInfo.doneButtonHeight; const p = this.sizeInfo.dividerHeight; const q = this.sizeInfo.menuPadding; const r = this.sizeInfo.menuExtras; const s = this.options.hideDisabled ? '.disabled' : ''; const t = function () { d = f.$newElement.offset().top - i.scrollTop(), e = i.height() - d - j; }; if (t(), this.options.size === 'auto') { const u = function () { let i; const j = function (b, c) { return function (d) { return c ? d.classList ? d.classList.contains(b) : a(d).hasClass(b) : !(d.classList ? d.classList.contains(b) : a(d).hasClass(b)); }; }; const p = f.$menuInner[0].getElementsByTagName('li'); const s = Array.prototype.filter ? Array.prototype.filter.call(p, j('hidden', !1)) : f.$lis.not('.hidden'); const u = Array.prototype.filter ? Array.prototype.filter.call(s, j('dropdown-header', !0)) : s.filter('.dropdown-header'); t(), b = e - r, f.options.container ? (g.data('height') || g.data('height', g.height()), c = g.data('height')) : c = g.height(), f.options.dropupAuto && f.$newElement.toggleClass('dropup', d > e && c > b - r), f.$newElement.hasClass('dropup') && (b = d - r), i = s.length + u.length > 3 ? 3 * k + r - 2 : 0, g.css({ 'max-height': `${b}px`, overflow: 'hidden', 'min-height': `${i + l + m + n + o}px` }), h.css({ 'max-height': `${b - l - m - n - o - q}px`, 'overflow-y': 'auto', 'min-height': `${Math.max(i - q, 0)}px` }); }; u(), this.$searchbox.off('input.getSize propertychange.getSize').on('input.getSize propertychange.getSize', u), i.off('resize.getSize scroll.getSize').on('resize.getSize scroll.getSize', u); } else if (this.options.size && this.options.size != 'auto' && this.$lis.not(s).length > this.options.size) {
            const v = this.$lis.not('.divider').not(s).children().slice(0, this.options.size)
              .last()
              .parent()
              .index(); const w = this.$lis.slice(0, v + 1).filter('.divider').length; b = k * this.options.size + w * p + q, f.options.container ? (g.data('height') || g.data('height', g.height()), c = g.data('height')) : c = g.height(), f.options.dropupAuto && this.$newElement.toggleClass('dropup', d > e && c > b - r), g.css({ 'max-height': `${b + l + m + n + o}px`, overflow: 'hidden', 'min-height': '' }), h.css({ 'max-height': `${b - q}px`, 'overflow-y': 'auto', 'min-height': '' });
          }
        }
      },
      setWidth() { if (this.options.width === 'auto') { this.$menu.css('min-width', '0'); const a = this.$menu.parent().clone().appendTo('body'); const b = this.options.container ? this.$newElement.clone().appendTo('body') : a; const c = a.children('.dropdown-menu').outerWidth(); const d = b.css('width', 'auto').children('button').outerWidth(); a.remove(), b.remove(), this.$newElement.css('width', `${Math.max(c, d)}px`); } else this.options.width === 'fit' ? (this.$menu.css('min-width', ''), this.$newElement.css('width', '').addClass('fit-width')) : this.options.width ? (this.$menu.css('min-width', ''), this.$newElement.css('width', this.options.width)) : (this.$menu.css('min-width', ''), this.$newElement.css('width', '')); this.$newElement.hasClass('fit-width') && this.options.width !== 'fit' && this.$newElement.removeClass('fit-width'); },
      selectPosition() { this.$bsContainer = a('<div class="bs-container" />'); let b; let c; const d = this; const e = function (a) { d.$bsContainer.addClass(a.attr('class').replace(/form-control|fit-width/gi, '')).toggleClass('dropup', a.hasClass('dropup')), b = a.offset(), c = a.hasClass('dropup') ? 0 : a[0].offsetHeight, d.$bsContainer.css({ top: b.top + c, left: b.left, width: a[0].offsetWidth }); }; this.$button.on('click', function () { const b = a(this); d.isDisabled() || (e(d.$newElement), d.$bsContainer.appendTo(d.options.container).toggleClass('open', !b.hasClass('open')).append(d.$menu)); }), a(window).on('resize scroll', () => { e(d.$newElement); }), this.$element.on('hide.bs.select', () => { d.$menu.data('height', d.$menu.height()), d.$bsContainer.detach(); }); },
      setSelected(a, b, c) { c || (c = this.findLis().eq(this.liObj[a])), c.toggleClass('selected', b); },
      setDisabled(a, b, c) { c || (c = this.findLis().eq(this.liObj[a])), b ? c.addClass('disabled').children('a').attr('href', '#').attr('tabindex', -1) : c.removeClass('disabled').children('a').removeAttr('href').attr('tabindex', 0); },
      isDisabled() { return this.$element[0].disabled; },
      checkDisabled() { const a = this; this.isDisabled() ? (this.$newElement.addClass('disabled'), this.$button.addClass('disabled').attr('tabindex', -1)) : (this.$button.hasClass('disabled') && (this.$newElement.removeClass('disabled'), this.$button.removeClass('disabled')), this.$button.attr('tabindex') != -1 || this.$element.data('tabindex') || this.$button.removeAttr('tabindex')), this.$button.click(() => !a.isDisabled()); },
      tabIndex() { this.$element.data('tabindex') !== this.$element.attr('tabindex') && this.$element.attr('tabindex') !== -98 && this.$element.attr('tabindex') !== '-98' && (this.$element.data('tabindex', this.$element.attr('tabindex')), this.$button.attr('tabindex', this.$element.data('tabindex'))), this.$element.attr('tabindex', -98); },
      clickListener() { const b = this; const c = a(document); this.$newElement.on('touchstart.dropdown', '.dropdown-menu', (a) => { a.stopPropagation(); }), c.data('spaceSelect', !1), this.$button.on('keyup', (a) => { /(32)/.test(a.keyCode.toString(10)) && c.data('spaceSelect') && (a.preventDefault(), c.data('spaceSelect', !1)); }), this.$button.on('click', () => { b.setSize(); }), this.$element.on('shown.bs.select', () => { if (b.options.liveSearch || b.multiple) { if (!b.multiple) { const a = b.liObj[b.$element[0].selectedIndex]; if (typeof a !== 'number' || b.options.size === !1) return; let c = b.$lis.eq(a)[0].offsetTop - b.$menuInner[0].offsetTop; c = c - b.$menuInner[0].offsetHeight / 2 + b.sizeInfo.liHeight / 2, b.$menuInner[0].scrollTop = c; } } else b.$menuInner.find('.selected a').focus(); }), this.$menuInner.on('click', 'li a', function (c) { const d = a(this); const e = d.parent().data('originalIndex'); const f = b.$element.val(); const g = b.$element.prop('selectedIndex'); if (b.multiple && c.stopPropagation(), c.preventDefault(), !b.isDisabled() && !d.parent().hasClass('disabled')) { const h = b.$element.find('option'); const i = h.eq(e); const j = i.prop('selected'); const k = i.parent('optgroup'); const l = b.options.maxOptions; const m = k.data('maxOptions') || !1; if (b.multiple) { if (i.prop('selected', !j), b.setSelected(e, !j), d.blur(), l !== !1 || m !== !1) { const n = l < h.filter(':selected').length; const o = m < k.find('option:selected').length; if (l && n || m && o) if (l && l == 1)h.prop('selected', !1), i.prop('selected', !0), b.$menuInner.find('.selected').removeClass('selected'), b.setSelected(e, !0); else if (m && m == 1) { k.find('option:selected').prop('selected', !1), i.prop('selected', !0); const p = d.parent().data('optgroup'); b.$menuInner.find(`[data-optgroup="${p}"]`).removeClass('selected'), b.setSelected(e, !0); } else { const q = typeof b.options.maxOptionsText === 'function' ? b.options.maxOptionsText(l, m) : b.options.maxOptionsText; let r = q[0].replace('{n}', l); let s = q[1].replace('{n}', m); const t = a('<div class="notify"></div>'); q[2] && (r = r.replace('{var}', q[2][l > 1 ? 0 : 1]), s = s.replace('{var}', q[2][m > 1 ? 0 : 1])), i.prop('selected', !1), b.$menu.append(t), l && n && (t.append(a(`<div>${r}</div>`)), b.$element.trigger('maxReached.bs.select')), m && o && (t.append(a(`<div>${s}</div>`)), b.$element.trigger('maxReachedGrp.bs.select')), setTimeout(() => { b.setSelected(e, !1); }, 10), t.delay(750).fadeOut(300, function () { a(this).remove(); }); } } } else h.prop('selected', !1), i.prop('selected', !0), b.$menuInner.find('.selected').removeClass('selected'), b.setSelected(e, !0); b.multiple ? b.options.liveSearch && b.$searchbox.focus() : b.$button.focus(), (f != b.$element.val() && b.multiple || g != b.$element.prop('selectedIndex') && !b.multiple) && b.$element.trigger('changed.bs.select', [e, i.prop('selected'), j]).triggerNative('change'); } }), this.$menu.on('click', 'li.disabled a, .popover-title, .popover-title :not(.close)', function (c) { c.currentTarget == this && (c.preventDefault(), c.stopPropagation(), b.options.liveSearch && !a(c.target).hasClass('close') ? b.$searchbox.focus() : b.$button.focus()); }), this.$menuInner.on('click', '.divider, .dropdown-header', (a) => { a.preventDefault(), a.stopPropagation(), b.options.liveSearch ? b.$searchbox.focus() : b.$button.focus(); }), this.$menu.on('click', '.popover-title .close', () => { b.$button.click(); }), this.$searchbox.on('click', (a) => { a.stopPropagation(); }), this.$menu.on('click', '.actions-btn', function (c) { b.options.liveSearch ? b.$searchbox.focus() : b.$button.focus(), c.preventDefault(), c.stopPropagation(), a(this).hasClass('bs-select-all') ? b.selectAll() : b.deselectAll(); }), this.$element.change(() => { b.render(!1); }); },
      liveSearchListener() {
        const d = this; const e = a('<li class="no-results"></li>'); this.$button.on('click.dropdown.data-api touchstart.dropdown.data-api', () => { d.$menuInner.find('.active').removeClass('active'), d.$searchbox.val() && (d.$searchbox.val(''), d.$lis.not('.is-hidden').removeClass('hidden'), e.parent().length && e.remove()), d.multiple || d.$menuInner.find('.selected').addClass('active'), setTimeout(() => { d.$searchbox.focus(); }, 10); }), this.$searchbox.on('click.dropdown.data-api focus.dropdown.data-api touchend.dropdown.data-api', (a) => { a.stopPropagation(); }), this.$searchbox.on('input propertychange', function () {
          if (d.$searchbox.val()) { let f = d.$lis.not('.is-hidden').removeClass('hidden').children('a'); f = d.options.liveSearchNormalize ? f.not(`:a${d._searchStyle()}("${b(d.$searchbox.val())}")`) : f.not(`:${d._searchStyle()}("${d.$searchbox.val()}")`), f.parent().addClass('hidden'), d.$lis.filter('.dropdown-header').each(function () { const b = a(this); const c = b.data('optgroup'); d.$lis.filter(`[data-optgroup=${c}]`).not(b).not('.hidden').length === 0 && (b.addClass('hidden'), d.$lis.filter(`[data-optgroup=${c}div]`).addClass('hidden')); }); const g = d.$lis.not('.hidden'); g.each(function (b) { const c = a(this); c.hasClass('divider') && (c.index() === g.first().index() || c.index() === g.last().index() || g.eq(b + 1).hasClass('divider')) && c.addClass('hidden'); }), d.$lis.not('.hidden, .no-results').length ? e.parent().length && e.remove() : (e.parent().length && e.remove(), e.html(d.options.noneResultsText.replace('{0}', `"${c(d.$searchbox.val())}"`)).show(), d.$menuInner.append(e)); } else d.$lis.not('.is-hidden').removeClass('hidden'), e.parent().length && e.remove(); d.$lis.filter('.active').removeClass('active'), d.$searchbox.val() && d.$lis.not('.hidden, .divider, .dropdown-header').eq(0).addClass('active').children('a')
            .focus(), a(this).focus();
        });
      },
      _searchStyle() { const a = { begins: 'ibegins', startsWith: 'ibegins' }; return a[this.options.liveSearchStyle] || 'icontains'; },
      val(a) { return typeof a !== 'undefined' ? (this.$element.val(a), this.render(), this.$element) : this.$element.val(); },
      changeAll(b) { typeof b === 'undefined' && (b = !0), this.findLis(); for (var c = this.$element.find('option'), d = this.$lis.not('.divider, .dropdown-header, .disabled, .hidden').toggleClass('selected', b), e = d.length, f = [], g = 0; e > g; g++) { const h = d[g].getAttribute('data-original-index'); f[f.length] = c.eq(h)[0]; }a(f).prop('selected', b), this.render(!1), this.$element.trigger('changed.bs.select').triggerNative('change'); },
      selectAll() { return this.changeAll(!0); },
      deselectAll() { return this.changeAll(!1); },
      toggle(a) { a = a || window.event, a && a.stopPropagation(), this.$button.trigger('click'); },
      keydown(c) {
        let d; let e; let f; let g; let h; let i; let j; let k; let l; const m = a(this); let n = m.is('input') ? m.parent().parent() : m.parent(); const o = n.data('this'); const p = ':not(.disabled, .hidden, .dropdown-header, .divider)'; const q = {
          32: ' ', 48: '0', 49: '1', 50: '2', 51: '3', 52: '4', 53: '5', 54: '6', 55: '7', 56: '8', 57: '9', 59: ';', 65: 'a', 66: 'b', 67: 'c', 68: 'd', 69: 'e', 70: 'f', 71: 'g', 72: 'h', 73: 'i', 74: 'j', 75: 'k', 76: 'l', 77: 'm', 78: 'n', 79: 'o', 80: 'p', 81: 'q', 82: 'r', 83: 's', 84: 't', 85: 'u', 86: 'v', 87: 'w', 88: 'x', 89: 'y', 90: 'z', 96: '0', 97: '1', 98: '2', 99: '3', 100: '4', 101: '5', 102: '6', 103: '7', 104: '8', 105: '9',
        }; if (o.options.liveSearch && (n = m.parent().parent()), o.options.container && (n = o.$menu), d = a('[role=menu] li', n), l = o.$newElement.hasClass('open'), !l && (c.keyCode >= 48 && c.keyCode <= 57 || c.keyCode >= 96 && c.keyCode <= 105 || c.keyCode >= 65 && c.keyCode <= 90) && (o.options.container ? o.$button.trigger('click') : (o.setSize(), o.$menu.parent().addClass('open'), l = !0), o.$searchbox.focus()), o.options.liveSearch && (/(^9$|27)/.test(c.keyCode.toString(10)) && l && o.$menu.find('.active').length === 0 && (c.preventDefault(), o.$menu.parent().removeClass('open'), o.options.container && o.$newElement.removeClass('open'), o.$button.focus()), d = a(`[role=menu] li${p}`, n), m.val() || /(38|40)/.test(c.keyCode.toString(10)) || d.filter('.active').length === 0 && (d = o.$menuInner.find('li'), d = o.options.liveSearchNormalize ? d.filter(`:a${o._searchStyle()}(${b(q[c.keyCode])})`) : d.filter(`:${o._searchStyle()}(${q[c.keyCode]})`))), d.length) {
          if (/(38|40)/.test(c.keyCode.toString(10))) {
            e = d.index(d.find('a').filter(':focus').parent()), g = d.filter(p).first().index(), h = d.filter(p).last().index(), f = d.eq(e).nextAll(p).eq(0).index(), i = d.eq(e).prevAll(p).eq(0).index(), j = d.eq(f).prevAll(p).eq(0).index(), o.options.liveSearch && (d.each(function (b) { a(this).hasClass('disabled') || a(this).data('index', b); }), e = d.index(d.filter('.active')), g = d.first().data('index'), h = d.last().data('index'), f = d.eq(e).nextAll().eq(0).data('index'), i = d.eq(e).prevAll().eq(0).data('index'), j = d.eq(f).prevAll().eq(0).data('index')), k = m.data('prevIndex'), c.keyCode == 38 ? (o.options.liveSearch && e--, e != j && e > i && (e = i), g > e && (e = g), e == k && (e = h)) : c.keyCode == 40 && (o.options.liveSearch && e++, e == -1 && (e = 0), e != j && f > e && (e = f), e > h && (e = h), e == k && (e = g)), m.data('prevIndex', e), o.options.liveSearch ? (c.preventDefault(), m.hasClass('dropdown-toggle') || (d.removeClass('active').eq(e).addClass('active').children('a')
              .focus(), m.focus())) : d.eq(e).children('a').focus();
          } else if (!m.is('input')) { let r; let s; const t = []; d.each(function () { a(this).hasClass('disabled') || a.trim(a(this).children('a').text().toLowerCase()).substring(0, 1) == q[c.keyCode] && t.push(a(this).index()); }), r = a(document).data('keycount'), r++, a(document).data('keycount', r), s = a.trim(a(':focus').text().toLowerCase()).substring(0, 1), s != q[c.keyCode] ? (r = 1, a(document).data('keycount', r)) : r >= t.length && (a(document).data('keycount', 0), r > t.length && (r = 1)), d.eq(t[r - 1]).children('a').focus(); } if ((/(13|32)/.test(c.keyCode.toString(10)) || /(^9$)/.test(c.keyCode.toString(10)) && o.options.selectOnTab) && l) { if (/(32)/.test(c.keyCode.toString(10)) || c.preventDefault(), o.options.liveSearch)/(32)/.test(c.keyCode.toString(10)) || (o.$menuInner.find('.active a').click(), m.focus()); else { const u = a(':focus'); u.click(), u.focus(), c.preventDefault(), a(document).data('spaceSelect', !0); }a(document).data('keycount', 0); }(/(^9$|27)/.test(c.keyCode.toString(10)) && l && (o.multiple || o.options.liveSearch) || /(27)/.test(c.keyCode.toString(10)) && !l) && (o.$menu.parent().removeClass('open'), o.options.container && o.$newElement.removeClass('open'), o.$button.focus());
        }
      },
      mobile() { this.$element.addClass('mobile-device'); },
      refresh() { this.$lis = null, this.liObj = {}, this.reloadLi(), this.render(), this.checkDisabled(), this.liHeight(!0), this.setStyle(), this.setWidth(), this.$lis && this.$searchbox.trigger('propertychange'), this.$element.trigger('refreshed.bs.select'); },
      hide() { this.$newElement.hide(); },
      show() { this.$newElement.show(); },
      remove() { this.$newElement.remove(), this.$element.remove(); },
      destroy() { this.$newElement.before(this.$element).remove(), this.$bsContainer ? this.$bsContainer.remove() : this.$menu.remove(), this.$element.off('.bs.select').removeData('selectpicker').removeClass('bs-select-hidden selectpicker'); },
    }; const f = a.fn.selectpicker; a.fn.selectpicker = d, a.fn.selectpicker.Constructor = e, a.fn.selectpicker.noConflict = function () { return a.fn.selectpicker = f, this; }, a(document).data('keycount', 0).on('keydown.bs.select', '.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role="menu"], .bs-searchbox input', e.prototype.keydown).on('focusin.modal', '.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role="menu"], .bs-searchbox input', (a) => { a.stopPropagation(); }), a(window).on('load.bs.select.data-api', () => { a('.selectpicker').each(function () { const b = a(this); d.call(b, b.data()); }); });
  }(a));
}));
// # sourceMappingURL=bootstrap-select.js.map
